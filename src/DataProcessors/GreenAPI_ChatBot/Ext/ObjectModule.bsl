
#Область Бот_ПрограммныйИнтерфейс

// Типовой алгоритм конфигурирования чат-бота
//
// 1. Прописываем свои шаблоны сообщений функции ПодготовитьШаблоныСообщений()
// 2. Прописываем своим обработчики сообщений для шаблонов (если нужно). См примеры в методах с префиксом Подключаемый_
// 3. Запускаем обработку и нажимаем кнопку Запустить Бота
// 4. Пишем на номер телефона, который подключен к сервису любое сообщение. Чат-бот должен ответить первым сообщением в прописанных шаблонах

Процедура ЗапуститьБота() Экспорт
	
	ПолучитьСообщение();
	
КонецПроцедуры

// Функция - Новый шаблоны сообщений
//
// Параметры:
//  КоллекцияШаблонов - ДеревоЗначений - Пустое дерево с колонками для создания шаблонов сообщений:
//   * Вариант - Строка - Вариант ответа клиента на данный шаблон запроса
//   * Текст - Строка - Текст, который будет выведет в ватсаппе клиенту
//   * ОбработчикСобытия - Строка - имя процедуры модуля обработки с одним параметром Чат, которая будет вызвана в момент ответа клиентом на сообщение в ватсаппе
//   * ИндексСтроки - Строка - служебный параметр
//  
//  КоллекцияГлобальныхШаблонов - ДеревоЗначений - Пустое дерево с колонками для создания глобальных шаблонов сообщений, действующий в любом уровне чат-бота, например команда "Отмена" и т.п.
// Возвращаемое значение:
//  ДеревоЗначений - подготовленное дерево с шаблонами сообщений
//
Функция ПодготовитьШаблоныСообщений(КоллекцияШаблонов, КоллекцияГлобальныхШаблонов)
	
	НовоеСообщение = НовыйОтветБота(КоллекцияШаблонов,,
		"Демонстрация работы чат-бота 1С
		|
		|Выберите действие:
		|1. Получить каталог товаров
		|2. Узнать адрес организации
		|3. Получить документацию");
	
	ОтветПоНоменклатуре = НовыйОтветБота(НовоеСообщение, "1", "Выводим список товаров...", "Подключаемый_ВывестиНоменклатуру");	
	НовыйОтветБота(НовоеСообщение, "2", "Выводим адрес...", "Подключаемый_ВывестиАдрес");
	НовыйОтветБота(НовоеСообщение, "3", "Выводим документацию...", "Подключаемый_ВывестиДокументацию");
	
	// Вложенный ответ запрос номенклатуры
	ОтветМенеджер = НовыйОтветБота(ОтветПоНоменклатуре,, "Хотите связаться с менеджером (Да/Нет)?");
	НовыйОтветБота(ОтветМенеджер, "Да", "Приглашаем менеджера...", "Подключаемый_ПригласитьМенеджера");
	НовыйОтветБота(ОтветМенеджер, "Нет", "", "Подключаемый_ВывестиНоменклатуру");
	
	НовыйГлобальныйОтветБота(КоллекцияГлобальныхШаблонов, "Выход", "Работа с чат-ботом завершается...", "Подключаемый_ВыключитьЧатБот");
	
	Возврат КоллекцияШаблонов;
	
КонецФункции

Функция СообщениеНеверныйВвод()
	
	Возврат "Ваша команда не распознана.";
	
КонецФункции

// Пример подключаемой процедуры
//
// Параметры:
//  Чат - СтрокаТЗ - Таблица с колонками: ИдЧата, ТекущийИндексШаблона
//  Шаблон	 - СтрокаДереваЗначений - Строка дерева. См описание в методе НовыйКоллекцияШаблонов();
//
Процедура Подключаемый_ВывестиНоменклатуру(Чат, Шаблон)

	ОтправитьТекстВГруппу(Чат.ИдЧата, 
	"Арт: 123456, Чайник Электролюкс; цена: 1 200 руб; на складе: 12 шт,
	|Арт: 12223, Холодильник Хайер; цена: 45 000 руб; на складе: 4 шт
	|Арт: 54656, Телевизор Самсунг; цена: 110 000 руб; на складе: 2 шт");
	
	Если Шаблон.Строки.Количество() > 0 Тогда
		БотОтправитьСообщение(Шаблон.Строки[0], Чат);
	КонецЕсли;

КонецПроцедуры

Процедура Подключаемый_ВывестиАдрес(Чат, Шаблон)
	
	ОтправитьТекстВГруппу(Чат.ИдЧата, 
	"Наш адрес: 123458, г. Москва, ул. Твардовского д. 8 стр.1, корпус ""Г"", Офис 513, Технопарк ""СТРОГИНО""");
	
КонецПроцедуры

Процедура Подключаемый_ВывестиДокументацию(Чат, Шаблон)

	ОтправитьТекстВГруппу(Чат.ИдЧата, 
	"Документация по методам API на сайте https://green-api.com/docs");

КонецПроцедуры

Процедура Подключаемый_ПригласитьМенеджера(Чат, Шаблон)
	
	ОтправитьТекстВГруппу(Чат.ИдЧата, "Ваш менеджер: Иван Петров, раб. телефон +7 495 313132");
	
КонецПроцедуры

Процедура Подключаемый_ВыключитьЧатБот(Чат, Шаблон)
	
	ИдЧата = Чат.ИдЧата;
	СтрокиЧата = ЧатыКлиентов.НайтиСтроки(Новый Структура("ИдЧата", Чат.ИдЧата));
	Если СтрокиЧата.Количество() > 0 Тогда
		СтрокаЧата = СтрокиЧата[0];
		ЧатыКлиентов.Удалить(ЧатыКлиентов.Индекс(СтрокаЧата));
	КонецЕсли;

	ОтправитьТекстВГруппу(ИдЧата, "Чат-бот выключен");
	
КонецПроцедуры

#КонецОбласти

#Область Бот_СлужебныеПроцедуры

Функция НовыйКоллекцияШаблонов()
	ШаблоныСообщений = Новый ДеревоЗначений;
	ШаблоныСообщений.Колонки.Добавить("Вариант", Новый ОписаниеТипов("Строка")); // Вариант ответа, например Да, Нет, 1.2.3 и т.п.
	ШаблоныСообщений.Колонки.Добавить("Текст", Новый ОписаниеТипов("Строка"));  // Текст для вывод в ватсапп
	ШаблоныСообщений.Колонки.Добавить("ОбработчикСобытия", Новый ОписаниеТипов("Строка")); // Обработчик, вызываемый при отправке текста сообщения в ватсапп
	ШаблоныСообщений.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Строка")); // слуебный параметр-идентификатор строки
	Возврат ШаблоныСообщений;
КонецФункции

// Готовит шаблон сообщения бота для отправки в WhatsApp
//
// Параметры:
//  ШаблоныСообщенийСтроки	 - ДеревоЗначений, СтрокаДереваЗначений - Строки дерева, в который нужно добавить овтет. Иерархия учитывается
//  Вариант					 - Строка - Вариант ответа клиента на данный шаблон запроса
//  Текст					 - Строка - Текст, который будет выведет в ватсаппе клиенту
//  ОбработчикСобытия		 - Процедура - процедура модуля обработки с одним параметром Чат, которая будет вызвана в момент ответа клиентом на сообщение в ватсаппе
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Строка шаблона сообщения
//
Функция НовыйОтветБота(ШаблоныСообщений, Вариант = "", Текст = "", ОбработчикСобытия = "")
	
	НовоеСообщение = ШаблоныСообщений.Строки.Добавить();
	НовоеСообщение.Вариант = Вариант;
	НовоеСообщение.Текст = Текст;
	НовоеСообщение.ОбработчикСобытия = ОбработчикСобытия;
	НовоеСообщение.ИндексСтроки = Строка(НовоеСообщение.Уровень()) + "_" + Строка(ШаблоныСообщений.Строки.Индекс(НовоеСообщение));
	
	Возврат НовоеСообщение;
	
КонецФункции

// Готовит глобальный шаблон сообщения бота для отправки в WhatsApp
//
// Параметры:
//  ШаблоныСообщенийСтроки	 - ДеревоЗначений, СтрокаДереваЗначений - Следует передавать отдельную коллекцию КоллекцияГлобальныхШаблонов
//  Вариант					 - Строка - Вариант ответа клиента на данный шаблон запроса
//  Текст					 - Строка - Текст, который будет выведет в ватсаппе клиенту
//  ОбработчикСобытия		 - Процедура - процедура модуля обработки с одним параметром Чат, которая будет вызвана в момент ответа клиентом на сообщение в ватсаппе
// 
// Возвращаемое значение:
//  СтрокаДереваЗначений - Строка шаблона сообщения
//
Функция НовыйГлобальныйОтветБота(ШаблоныСообщений, Вариант = "", Текст = "", ОбработчикСобытия = "")
	
	НовоеСообщение = ШаблоныСообщений.Строки.Добавить();
	НовоеСообщение.Вариант = Вариант;
	НовоеСообщение.Текст = Текст;
	НовоеСообщение.ОбработчикСобытия = ОбработчикСобытия;
	НовоеСообщение.ИндексСтроки = Строка(НовоеСообщение.Уровень()) + "_" + Строка(ШаблоныСообщений.Строки.Индекс(НовоеСообщение));
	
	Возврат НовоеСообщение;
	
КонецФункции

Процедура ВызватьБота(ИдЧата, ИдСообщения, ТекстСообщения)
	
	ЛокальныеШаблоны = НовыйКоллекцияШаблонов();
	ГлобальныеШаблоны = НовыйКоллекцияШаблонов();
	ПодготовитьШаблоныСообщений(ЛокальныеШаблоны, ГлобальныеШаблоны);
		
	Чат = НайтиЧатКлиента(ИдЧата);
	
	Если ЗначениеЗаполнено(Чат.ТекущийИндексШаблона) Тогда
		
		Если ОбработатьГлобальныйОтветКлиента(ГлобальныеШаблоны, Чат, ТекстСообщения) Тогда
			Возврат;
		КонецЕсли;
		
		// Продолжение чата с клиентом
		СтрокиШаблонов = ЛокальныеШаблоны.Строки.НайтиСтроки(Новый Структура("ИндексСтроки", Чат.ТекущийИндексШаблона), Истина);
		Если СтрокиШаблонов.Количество() > 0  Тогда
			Шаблон = СтрокиШаблонов[0];
			ОбработатьОтветКлиента(Шаблон, Чат, ТекстСообщения);
		Иначе
			ВызватьИсключение "Не найден шаблон по индексу " + Чат.ТекущийИндексШаблона;
		КонецЕсли;
	Иначе
		// Новый чат с клиентом
		Шаблон = ЛокальныеШаблоны.Строки[0];
		ОбработатьОтветКлиента(Шаблон, Чат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтветКлиента(Шаблон, Чат, Ответ = "")
	
	Если ПустаяСтрока(Ответ) Тогда
		// Отправляем приветствие
		БотОтправитьСообщение(Шаблон, Чат);
	ИначеЕсли Не ПустаяСтрока(Ответ) И Шаблон.Строки.Количество() = 0 Тогда
		// Вариантов ответа вообще нет, просто выводим сообщение родителя
		БотОтправитьСообщение(Шаблон.Родитель, Чат);
	Иначе
		// Получили ответ от клиента, анализируем его.
		ОтветШаблонСтроки = Шаблон.Строки.НайтиСтроки(Новый Структура("Вариант", Ответ));
		Если Шаблон.Строки.Количество() > 0 И ОтветШаблонСтроки.Количество() = 0 Тогда
			// Клиент ответил что-то неверное, отправляем запрос повторно
			ОтправитьТекстВГруппу(Чат.ИдЧата, СообщениеНеверныйВвод());
			БотОтправитьСообщение(Шаблон, Чат);
		Иначе
			БотОтветитьНаВопрос(Шаблон, Чат, Ответ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьГлобальныйОтветКлиента(ГлобальныеШаблоны, Чат, Ответ = "")
	ОтветШаблонСтроки = ГлобальныеШаблоны.Строки.НайтиСтроки(Новый Структура("Вариант", Ответ));
	Если ОтветШаблонСтроки.Количество() > 0 Тогда
		ОтветШаблон = ОтветШаблонСтроки[0];
		Если ЗначениеЗаполнено(ОтветШаблон.Текст) Тогда 
			ОтправитьТекстВГруппу(Чат.ИдЧата, ОтветШаблон.Текст);
		КонецЕсли;
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(Чат);
		ПараметрыМетода.Добавить(ОтветШаблон);
		ВыполнитьМетодКонфигурации(ОтветШаблон.ОбработчикСобытия, ПараметрыМетода);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Процедура БотОтправитьСообщение(Шаблон, Чат)
	
	Если Не ПустаяСтрока(Шаблон.Текст) Тогда
		ОтправитьТекстВГруппу(Чат.ИдЧата, Шаблон.Текст);
		ОбновитьЧатыКлиентов(Чат.ИдЧата, Шаблон.ИндексСтроки);
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(Чат);
		ПараметрыМетода.Добавить(Шаблон);
		ВыполнитьМетодКонфигурации(Шаблон.ОбработчикСобытия, ПараметрыМетода);
	КонецЕсли;
	
КонецПроцедуры

Процедура БотОтветитьНаВопрос(Шаблон, Чат, Ответ)
	
	ОтветШаблонСтроки = Шаблон.Строки.НайтиСтроки(Новый Структура("Вариант", Ответ));
	ОтветШаблон = ОтветШаблонСтроки[0];
	// Клиент ответил верно, обрабатываем его
	Если Не ПустаяСтрока(ОтветШаблон.Текст) Тогда
		ОтправитьТекстВГруппу(Чат.ИдЧата, ОтветШаблон.Текст);
	КонецЕсли;
	
	Если ОтветШаблон.Строки.Количество() > 0 Тогда
		// Двигаемся на 1 уровень ниже
		ОбновитьЧатыКлиентов(Чат.ИдЧата, ОтветШаблон.ИндексСтроки);
	Иначе
		// Двигаемся на 1 уровень выше
		//ОбновитьЧатыКлиентов(Чат.ИдЧата, ОтветШаблон.Родитель.ИндексСтроки);
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Чат);
	ПараметрыМетода.Добавить(ОтветШаблон);
	ВыполнитьМетодКонфигурации(ОтветШаблон.ОбработчикСобытия, ПараметрыМетода);
	
КонецПроцедуры

Функция НайтиЧатКлиента(ИдЧата)
	
	СтрокиЧата = ЧатыКлиентов.НайтиСтроки(Новый Структура("ИдЧата", ИдЧата));
	Если СтрокиЧата.Количество() = 0 Тогда
		СтрокаЧата = ЧатыКлиентов.Добавить();
		СтрокаЧата.ИдЧата = ИдЧата;
		Возврат СтрокаЧата;
	Иначе
		СтрокаЧата = СтрокиЧата[0];
		Возврат СтрокаЧата;
	КонецЕсли;

КонецФункции

Процедура ОбновитьЧатыКлиентов(ИдЧата, ТекущийИндексШаблона)
	
	СтрокиЧата = ЧатыКлиентов.НайтиСтроки(Новый Структура("ИдЧата", ИдЧата));
	Если СтрокиЧата.Количество() = 0 Тогда
		СтрокаЧата = ЧатыКлиентов.Добавить();
	Иначе
		СтрокаЧата = СтрокиЧата[0];
	КонецЕсли;
	
	СтрокаЧата.ИдЧата = ИдЧата;
	СтрокаЧата.ТекущийИндексШаблона = ТекущийИндексШаблона;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейсПолученияДанных

// Запускает процесс получения сообщений. Результаты выполнения метода обрабатываются методами ниже
//
Процедура ПолучитьСообщение() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	ТипыУведомлений = Новый Структура;
	ТипыУведомлений.Вставить("ВходящееСообщение", "incomingMessageReceived");
	ТипыУведомлений.Вставить("СтатусОтправленногоСообщения", "outgoingMessageStatus");
	ТипыУведомлений.Вставить("СостояниеАккаунта", "stateInstanceChanged");
	ТипыУведомлений.Вставить("СостояниеТелефона", "deviceInfo");
	
	Ответ = ПолучитьУведомление();
	Если Ответ <> Неопределено Тогда
		
		Отказ = Ложь;
		ТекстСообщения = Неопределено;
		ТегСообщения = Формат(Ответ.receiptId, "ЧГ=0");
		Если Ответ.body.typeWebhook = ТипыУведомлений.ВходящееСообщение  Тогда
			Если Ответ.body.messageData.typeMessage = "imageMessage"
				Или Ответ.body.messageData.typeMessage = "videoMessage"
				Или Ответ.body.messageData.typeMessage = "documentMessage"
				Или Ответ.body.messageData.typeMessage = "audioMessage" Тогда
				
				ЧастиАдреса = РазбитьURL(Ответ.body.messageData.fileMessageData.downloadUrl);
				Если Ответ.body.messageData.typeMessage = "documentMessage" Тогда
					ИмяФайла = Ответ.body.messageData.fileMessageData.fileName;
				КонецЕсли;
				ПолноеИмяФайла = СкачатьФайл(ЧастиАдреса.Хост, ЧастиАдреса.ОтносительныйАдрес, Истина);
				Попытка
					ПриПолученииСообщенияФайл(Отказ, Ответ, ПолноеИмяФайла);
				Исключение
					Отказ = Истина;
				КонецПопытки;
			ИначеЕсли Ответ.body.messageData.typeMessage = "textMessage" Тогда
				ПриПолученииСообщенияТекст(Отказ, Ответ);
			ИначеЕсли Ответ.body.messageData.typeMessage = "extendedTextMessage" Тогда
				ПриПолученииСообщенияТекстРасширенный(Отказ, Ответ);
			КонецЕсли;
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СтатусОтправленногоСообщения Тогда
			ПриПолученииСтатусаОтправленногоСообщения(Отказ, Ответ);
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеАккаунта Тогда
			ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Ответ);
		ИначеЕсли Ответ.body.typeWebhook = ТипыУведомлений.СостояниеТелефона Тогда
			ПриПолученииСтатусаУстройства(Отказ, Ответ);
		КонецЕсли;
		
		Если Не Отказ Тогда
			УдалитьУведомление(ТегСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщенияТекст(Отказ, Данные)
	
	Если Данные.body.typeWebhook = "incomingMessageReceived" Тогда
		ТекстСообщения = Данные.body.messageData.textMessageData.textMessage;
		ИдЧата = Данные.body.senderData.chatId;
		ИдСообщения = Данные.body.idMessage;
		
		ВызватьБота(ИдЧата, ИдСообщения, ТекстСообщения);
	Иначе
		// Другие ответы от пользователя (цитаты и прочее) на неинтересн
	КонецЕсли
	
КонецПроцедуры

// Обработчик, срабатывающий при получении текстового сообщения 
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/Webhook-IncomingMessageReceived/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСообщенияТекстРасширенный(Отказ, Данные)
	
	Если Данные.body.typeWebhook = "incomingMessageReceived" Тогда
		ТекстСообщения = Данные.body.messageData.extendedTextMessageData.text;
		ИдЧата = Данные.body.senderData.chatId;
		ИдСообщения = Данные.body.idMessage;
		
		ВызватьБота(ИдЧата, ИдСообщения, ТекстСообщения);
	Иначе
		// Другие ответы от пользователя (цитаты и прочее) на неинтересн
	КонецЕсли
	
КонецПроцедуры

// Обработчик, срабатывающий при получении файлового сообщения
// https://green-api.com/docs/api/receiving/notifications-format/incoming-message/ImageMessage/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//  Файл - Строка - Полное имя к файлу во временном каталоге ОС
//
Процедура ПриПолученииСообщенияФайл(Отказ, Данные, Файл)

КонецПроцедуры

// Обработчик, срабатывающий при получении статуса ранее отправленного сообщения, отправлено, доставлено, прочитано и др.
// https://green-api.com/docs/api/receiving/notifications-format/outgoing-message/OutgoingMessageStatus/
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаОтправленногоСообщения(Отказ, Данные)

КонецПроцедуры

// Обработчик, срабатывающий при получении данных о состоянии авторизации аккаунта.
// https://green-api.com/docs/api/receiving/notifications-format/StateInstanceChanged/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаАвторизацииАккаунта(Отказ, Данные)
	
КонецПроцедуры

// Обработчик, срабатывающий при получении данных данных об устройстве и уровне заряда батареи, на котором запущено приложение WhatsApp Business
// https//green-api.com/docs/api/receiving/notifications-format/DeviceInfo/
//
// Параметры,
//  Отказ - Булево -  Если Истина, то сообщение не будет подтверждено и вернется на сервер 
//    для повторного получения
//  Данные - Структура - Структура полей сообщения в формате JSON. См подробнее в документации
//    
//
Процедура ПриПолученииСтатусаУстройства(Отказ, Данные)
	
КонецПроцедуры

#КонецОбласти

#Область API

#Область Аккаунт

// Метод предназначен для получения текущих настроек аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьНастройкиАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getSettings"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для установки настроек аккаунта. 
// Допускается указывать параметры выборочно. Хотя бы один параметр должен быть указан.
// Подробнее https://green-api.com/docs/api/account/SetSettings/
//
// Параметры:
//  СтруктураНастроек - Структура - См описание метода https://green-api.com/docs/api/account/SetSettings/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УстановитьНастройкиАккаунта(СтруктураНастроек) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, СтруктураНастроек);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

// Метод предназначен для получения состояния аккаунта.
// Подробнее https://green-api.com/docs/api/account/GetStateInstance/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьСостояниеАккаунта() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getStateInstance"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для перезапуска аккаунта.
// Подробнее https://green-api.com/docs/api/account/Reboot/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПерезапуститьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "reboot"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для разлогинивания аккаунта.
// Подробнее https://green-api.com/docs/api/account/Logout/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция РазлогинитьАккаунт() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "logout"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для получения QR-кода. Для авторизации аккаунта требуется считать QR-код из приложения
// WhatsApp Business на телефоне. Также получить QR-код и авторизовать аккаунт можно в личном кабинете. 
// Процедура авторизации аккаунта через личный кабинет описана в разделе Перед началом работы.
// Подробнее https://green-api.com/docs/api/account/QR/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьQRКод() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Возврат ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "qr"), Истина);
	
КонецФункции

#КонецОбласти

#Область Отправка

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекст(Телефон, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", "");
	Структура.Вставить("phoneNumber", Телефон);
	Структура.Вставить("message", Сообщение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки текстового сообщения в личный или групповой чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из очереди регулирует 
// параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendMessage/
//
// Параметры:
//  ИдЧата - Строка - Номер чата в формате 79001234568@c.us
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьТекстВГруппу(ИдЧата, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Структура.Вставить("message", Сообщение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendMessage"), Тело);
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого через форму (form-data). 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUpload/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ПутьКФайлу- -  Полный путь к файлу на диске
//  Сообщение - Строка - Текст сообщения. Поддерживаются символы emoji 
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокумент(Телефон, ПутьКФайлу, Сообщение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	Хост = ХостПоУмолчанию();
	
	ОтправляемыйФайл = Новый Файл(ПутьКФайлу);
	
	// подготовим файлы с данными для отправки
	массивФайлов = Новый Массив;
	Boundary = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt"); // первый файл, содержащий параметры
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	// параметр "chatId"
	ЗаписьТекста.ЗаписатьСтроку("---"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""chatId""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("""""");
	// параметр "phoneNumber"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""phoneNumber""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(формат(Телефон,"ЧГ="));
	// параметр "caption"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""caption""");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку(Сообщение);
	
	// начало параметра "file"
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary);
	ЗаписьТекста.ЗаписатьСтроку("Content-Disposition: form-data; name=""file""; filename=""" + ОтправляемыйФайл.Имя + """");
	ЗаписьТекста.ЗаписатьСтроку("Content-Type: image/jpeg");
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом 1
	
	массивФайлов.Добавить(имяФайлаСПараметрами); // добавляем 1-ый файл для объединения
	массивФайлов.Добавить(ПутьКФайлу); // добавляем фото для объединения
	
	// третий файл, закрывающий параметры
	имяФайлаСПараметрами = ПолучитьимяВременногоФайла("txt");
	
	ЗаписьТекста = Новый ЗаписьТекста(имяФайлаСПараметрами);
	
	ЗаписьТекста.ЗаписатьСтроку("");
	ЗаписьТекста.ЗаписатьСтроку("--"+boundary+"--");
	
	ЗаписьТекста.Закрыть(); // заканчиваем работу с файлом
	
	массивФайлов.Добавить(имяФайлаСПараметрами); // добавляем файл, закрывающий параметры
	
	// результирующий файл, который и будет отправлен
	имяФайлаОтправки = ПолучитьИмяВременногоФайла("out");
	
	// объединим все файлы
	ОбъединитьФайлы(массивФайлов, имяФайлаОтправки);
	
	ФайлОтправки = Новый Файл(имяФайлаОтправки);
	РазмерФайлаОтправки = XMLСтрока(ФайлОтправки.Размер());
	
	// передадим данные на сервер 
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "multipart/form-data; boundary="+boundary);
	Заголовки.Вставить("Content-Lenght", РазмерФайлаОтправки);
	
	Ответ = ОтправитьФайлPOSTЗапрос(Хост, URLМетодаСервиса(Инстанс, Токен, "sendFileByUpload"), Заголовки, ФайлОтправки);
	
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для отправки файла, загружаемого по ссылке.
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendFileByUrl/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  УРЛФайла - Строка - Интернет-ссылка на файл
//  ИмяФайла - Строка - Название файла обязательно с расширением. Например: readme.txt
//  Заголовок - Строка - Представление файла для whatsapp-а
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьВидеоАудиоИзображениеДокументПоURL(Телефон, УРЛФайла, ИмяФайла, Заголовок = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlFile", УРЛФайла);
	Структура.Вставить("fileName", ИмяФайла);
	Структура.Вставить("caption", Заголовок);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendFileByUrl"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения геолокации. Сообщение будет добавлено в очередь на отправку
// Подробнее https://green-api.com/docs/api/sending/SendLocation/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  НазваниеЛокации - Строка - Необязательный. Название локации
//  Адрес - Строка - Необязательный. Адрес локации
//  Широта - Число -  Широта локации
//  Долгота - Число - Долгота локации
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьГеолокацию(Телефон, НазваниеЛокации = "", Адрес = "", Широта, Долгота) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("nameLocation", НазваниеЛокации);
	Структура.Вставить("address", Адрес);
	Структура.Вставить("latitude", Широта);
	Структура.Вставить("longitude", Долгота);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLocation"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения с контактом. 
// Формируется визитная карточка контакта и отправляется в чат. 
// Сообщение будет добавлено в очередь на отправку. Скорость отправки сообщений из 
// очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendContact/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  ТелефонКонтакта - Строка - номер телефона контакта в международном формате (без +) 11 или 12 цифр
//  Имя - Строка - Имя контакта
//  Отчество - Строка - Отчество контакта
//  Фамилия - Строка - Фамилия контакта
//  Компания - Строка - Название компании контакта
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьКонтакт(Телефон, ТелефонКонтакта, Имя = "", Отчество = "", Фамилия = "", Компания = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	
	Контакт = Новый Структура;
	Контакт.Вставить("phoneContact", ТелефонКонтакта);
	Контакт.Вставить("firstName", Имя);
	Контакт.Вставить("middleName", Отчество);
	Контакт.Вставить("lastName", Фамилия);
	Контакт.Вставить("company", Компания);
	
	Структура.Вставить("contact", Контакт);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendContact"), Тело);
	
КонецФункции

// Метод предназначен для отправки сообщения со ссылкой, по которой будут добавлены 
// превью изображения, заголовок и описание. Картинка, заголовок и описание получаются 
// из Open Graph разметки страницы, на которую указывает ссылка. Сообщение будет добавлено в очередь на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/sending/SendLink/
//
// Параметры:
//  Телефон - Строка - Номер мобильного телефона
//  АдресСсылки - Строка - Адрес ссылки
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтправитьСсылку(Телефон, АдресСсылки) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ПараметрИдЧата(Телефон));
	Структура.Вставить("urlLink", АдресСсылки);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "sendLink"), Тело);
	
КонецФункции

#КонецОбласти

#Область Получение

#Область ПолучениеУведомлений

// Метод предназначен для получения одного входящего уведомления из очереди уведомлений.
// Метод ReceiveNotification ожидает получения уведомления в течение 20 сек. 
// Вызов метода завершается с пустым ответом в случае достижения таймаута. 
// Если в течение 20 сек в очереди появляется уведомление, то вызов метода завешается, 
// и метод возвращает полученное уведомление.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/ReceiveNotification/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьУведомление() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "receiveNotification"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для удаления входящего уведомления из очереди уведомлений. 
// Чтобы указать, какое уведомление следует удалить, используйте параметр НомерУведомления.
// После получения и обработки входящего уведомления требуется удалить уведомление из очереди. 
// Для этого требуется выполнить данный метод. После вызова метода уведомление будет считаться принятым 
// и обработанным и будет безвозвратно удалено из очереди. Таким образом следующий вызов
// метода ПолучитьУведомление вернет следующее уведомление из очереди в порядке поступления уведомлений в очередь.
// Срок хранения входящих уведомлений в очереди составляет 24 часа.
// Подробнее https://green-api.com/docs/api/receiving/technology-http-api/DeleteNotification/
//
// Параметры:
//  НомерУведомления - Число - Идентификатор доставки для удаления входящего уведомления, полученный методом ПолучитьУведомление()
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУведомление(НомерУведомления) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Адрес = URLМетодаСервиса(Инстанс, Токен, "deleteNotification") + "/" + НомерУведомления;
	Ответ = ОтправитьDELETEЗапрос(ХостПоУмолчанию(), Адрес, Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ПолучениеФайлов

// Метод предназначен для скачивания файлов по любой ссылке из интернета
//
// Параметры:
//  downloadUrl - Строка - Ссылка на сачивание файла
// 
// Возвращаемое значение:
//  Строка - абсолютный путь к файлу в папке временных файлов
//
Функция СкачатьФайлПоСсылке(downloadUrl)
	
	ЧастиАдреса = РазбитьURL(downloadUrl);
	Хост = ЧастиАдреса.Хост;
	Адрес = ЧастиАдреса.ОтносительныйАдрес;
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);

	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		РасширениеФайла = ПолучитьРасширениеПоMimeType(Ответ.Заголовки["Content-Type"]);
		Если РасширениеФайла = Неопределено Тогда
			РасширениеФайла = ""
		КонецЕсли;
		
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

// Метод предназначен для скачивания принятых и отправленных файлов. 
// Ссылки на принятые файлы передаются во Входящих сообщениях, а также их можно
// получить методом LastIncomingMessages. Ссылки на отправленные
// файлы можно получить методом LastOutgoingMessages.
// Подробнее https://green-api.com/docs/api/receiving/files/DownloadFile/
//
// Параметры:
//  ИдСообщения - Строка - Идентификатор сообщения, передаваемый во Входящих сообщениях или 
//    при отправки файлов методами SendFileByUrl, SendFileByUpload. Данный параметр передаётся как завершающая часть url запроса
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СкачатьФайлИзВходящегоУведомления(ИдСообщения) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), ПодставитьПараметрыВСтроку("waInstance%1/downloadFile/%2", Инстанс, ИдСообщения), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Журналы

// Метод возвращает крайние входящие сообщения аккаунта.
// Срок хранения входящих сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastIncomingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналВходящихСообщений() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "lastIncomingMessages"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод возвращает крайние отправленные сообщения аккаунта.
// Срок хранения отправленных сообщений на сервере составляет 24 часа.
// Подробнее https://green-api.com/docs/api/journals/LastOutgoingMessages/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьЖурналОтправленныхСообщений() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "lastOutgoingMessages"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Очереди

// Метод предназначен для получения списка сообщений, находящихся в очереди на отправку. 
// Скорость отправки сообщений из очереди регулирует параметр Интервал отправки сообщений.
// Подробнее https://green-api.com/docs/api/queues/ShowMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "showMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

// Метод предназначен для очистки очереди сообщений на отправку.
// Подробнее https://green-api.com/docs/api/queues/ClearMessagesQueue/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОчиститьОчередьСообщенийКОтправке() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "clearMessagesQueue"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область Группы

// Метод предназначен для создания группового чата.
// Подробнее https://green-api.com/docs/api/groups/CreateGroup/
//
// Параметры:
//  ИмяГруппы - Строка - Наименование нового группового чата
//  НомераТелефонов - Массив - Коллекция телефонов участников группы
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция СоздатьГруппу(ИмяГруппы, НомераТелефонов) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupName", ИмяГруппы);
	
	Идентификаторы = Новый Массив;
	Для каждого Телефон Из НомераТелефонов Цикл
		Идентификаторы.Добавить(ПараметрИдЧата(Телефон));
	КонецЦикла;
	
	Структура.Вставить("chatIds", Идентификаторы);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "createGroup"), Тело);
	
КонецФункции

// Метод изменяет наименование группового чата.
// Подробнее https://green-api.com/docs/api/groups/UpdateGroupName/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИмяГруппы - Строка - Наименование группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ИзменитьИмяГруппы(ИдГруппы, ИмяГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("groupName", ИмяГруппы);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "updateGroupName"), Тело);
	
КонецФункции

// Метод получает данные группового чата.
// Подробнее https://green-api.com/docs/api/groups/GetGroupData/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюОГруппе(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getGroupData"), Тело);
	
КонецФункции

// Метод добавляет участника в групповой чат.
// Подробнее https://green-api.com/docs/api/groups/AddGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ДобавитьУчастникаВГруппу(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "addGroupParticipant"), Тело);
	
КонецФункции

// Метод удаляет участника из группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveGroupParticipant/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция УдалитьУчастникаИзГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeGroupParticipant"), Тело);
	
КонецФункции

// Метод назначает участника группового чата администратором.
// Подробнее https://green-api.com/docs/api/groups/SetGroupAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция НазначитьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setGroupAdmin"), Тело);
	
КонецФункции

// Метод лишает участника прав администрирования группового чата.
// Подробнее https://green-api.com/docs/api/groups/RemoveAdmin/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата
//  ИдУчастника - Строка - Идентификатор участника, добавляемого в групповой чат.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтозватьПраваАдминистратораГруппы(ИдГруппы, ИдУчастника) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Структура.Вставить("participantChatId", ИдУчастника);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "removeAdmin"), Тело);
	
КонецФункции

// Метод производит выход пользователя текущего аккаунта из группового чата.
// Подробнее https://green-api.com/docs/api/groups/LeaveGroup/
//
// Параметры:
//  ИдГруппы - Строка - Идентификатор группового чата, из которого необходимо выйти.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ВыйтиИзГруппы(ИдГруппы) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("groupId", ИдГруппы);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "leaveGroup"), Тело);
	
КонецФункции

#КонецОбласти

#Область ОтметкаПрочтения

// Метод предназначен для отметки сообщений в чате прочитанными.
// Могут быть отмечены прочитанными все сообщения в чате или только одно заданное сообщение.
// Подробнее https://green-api.com/docs/api/marks/ReadChat/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор группового чата
//  ИдСообщения - Строка - Необязательный. Идентификатор входящего сообщения, которое необходимо отметить прочитанным. 
//    Если не указан, то все непрочитанные сообщения в чате будут отмечены прочитанными.
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ОтметитьЧатПрочитанным(ИдЧата, ИдСообщения = Неопределено) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	Если ЗначениеЗаполнено(ИдСообщения) Тогда
		Структура.Вставить("idMessage", ИдСообщения);
	КонецЕсли;
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "readChat"), Тело);
	
КонецФункции

#КонецОбласти

#Область Устройство

// Метод предназначен для получения информации об устройстве (телефоне), на котором запущено приложение WhatsApp Business.
// Подробнее https://green-api.com/docs/api/phone/GetDeviceInfo/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьИнформациюОбУстройстве() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getDeviceInfo"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область СервисныеМетоды

// Метод проверяет наличие аккаунта WhatsApp на номере телефона.
// Подробнее https://green-api.com/docs/api/service/CheckWhatsapp/
//
// Параметры:
//  Телефон - Число - Номер телефона получателя в международном формате: 11 или 12 цифр; Пример: 79001234567 или 380123456789
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПроверитьНаличиеWhatsApp(Телефон) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("phoneNumber", Телефон);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "checkWhatsapp"), Тело);
	
КонецФункции

// Метод возвращает аватар корреспондента или группового чата.
// Подробнее https://green-api.com/docs/api/service/GetAvatar/
//
// Параметры:
//  ИдЧата - Строка - Идентификатор корреспондента или группового чата
//
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьАватарКонтакта(ИдЧата) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить("chatId", ИдЧата);
	
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Возврат ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getAvatar"), Тело);
	
КонецФункции

// Метод предназначен для получения списка контактов текущего аккаунта.
// Подробнее https://green-api.com/docs/api/service/GetContacts/
// 
// Возвращаемое значение:
//  ЧтениеJSON  - Ответ сервера
//
Функция ПолучитьКонтакты() Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Ответ = ОтправитьGETЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "getContacts"), Истина);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область HttpКлиент

Функция ОтправитьФайлPOSTЗапрос(Хост, Адрес, Заголовки, ФайлОтправки)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows()
	);
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес,Заголовки);
	ВебЗапрос.УстановитьИмяФайлаТела(ФайлОтправки.ПолноеИмя);
	
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда 
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();Возврат ПрочитанныйОтвет;
	Иначе
		ВызватьИсключение 	Ответ.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
КонецФункции

Функция ОтправитьGETЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		ТелоОтвета = Ответ.ПолучитьТелоКакСтроку();
		Если Не ПустаяСтрока(ТелоОтвета) Тогда
			Чтение = Новый ЧтениеJSON();
			Чтение.УстановитьСтроку(ТелоОтвета);
			ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
			Чтение.Закрыть();
			Возврат ПрочитанныйОтвет;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция СкачатьФайл(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.Получить(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		РасширениеФайла = ПолучитьРасширениеПоMimeType(Ответ.Заголовки["Content-Type"]);
		Если РасширениеФайла = Неопределено Тогда
			РасширениеФайла = ""
		КонецЕсли;
		
		Бинари = Ответ.ПолучитьТелоКакДвоичныеДанные();
		ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
		Бинари.Записать(ИмяФайла);
		Возврат ИмяФайла;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьPOSTЗапрос(Хост, Адрес, Тело)
	
	Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
	Новый СертификатКлиентаWindows(),
	Новый СертификатыУдостоверяющихЦентровWindows());
	
	Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	ВебЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	
	ВебЗапрос.УстановитьТелоИзСтроки(Тело);
	Ответ = Соединение.ОтправитьДляОбработки(ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

Функция ОтправитьDELETEЗапрос(Хост, Адрес, Защищенное)
	
	Если Защищенное Тогда
		
		Сертификат = Новый ЗащищенноеСоединениеOpenSSL(
		Новый СертификатКлиентаWindows(),
		Новый СертификатыУдостоверяющихЦентровWindows());
		
		Соединение = Новый HTTPСоединение(Хост,,,,,, Сертификат);
		
	Иначе
		
		Соединение = Новый HTTPСоединение(Хост);
		
	КонецЕсли;
	
	ВебЗапрос = Новый HTTPЗапрос(Адрес);
	Ответ = Соединение.ВызватьHTTPМетод("DELETE", ВебЗапрос);
	Если Ответ.КодСостояния = 200 Тогда
		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
		ПрочитанныйОтвет = ПрочитатьJSON(Чтение);
		Чтение.Закрыть();
		Возврат ПрочитанныйОтвет;
	Иначе
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку("UTF-8");
		ВызватьИсключение ПодставитьПараметрыВСтроку("Сервер вернул статус %1. 
		|%2", Ответ.КодСостояния, ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтатусСервиса(ТекстОшибки = "") Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Попытка
		Ответ = ПолучитьСостояниеАккаунта();
		Авторизован = НРег(Ответ.stateInstance) = "authorized";
		Если Не Авторизован Тогда
			ТекстОшибки = "Сервер вернул статус, " + Ответ.stateInstance;
		КонецЕсли;
		Возврат Авторизован;
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры,
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида "%ИмяПараметра");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение,
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример,
//  ПодставитьПараметрыВСтроку(НСтр("ru="%1 пошел в %2""), "Вася", "Зоопарк") = "Вася пошел в Зоопарк".
//
// Примечание,
//  В случаях, когда число используемых параметров в строке совпадает с числом переданных для подстановки параметров,
//  рекомендуется использовать функцию платформы СтрШаблон.
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%4", Параметр4);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%5", Параметр5);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%6", Параметр6);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%7", Параметр7);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%8", Параметр8);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%9", Параметр9);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ХостПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(apiUrl) Тогда	
		Результат = apiUrl;
	Иначе 
		Результат = "api.green-api.com";
	КонецЕсли;     
	
	Возврат Результат;

КонецФункции

Функция ХостМедиаПоУмолчанию() Экспорт 
	
	Если ЗначениеЗаполнено(mediaUrl) Тогда	
		Результат = mediaUrl;
	Иначе 
		Результат = "media.green-api.com";
	КонецЕсли;     
	
	Возврат Результат;
	
КонецФункции

Функция ХостВебхуковПоУмолчанию() Экспорт
	Возврат "https://webhook.green-api.com";
КонецФункции

Функция URLМетодаСервиса(Инстанс, Токен, Метод)
	Возврат ПодставитьПараметрыВСтроку("waInstance%1/%2/%3", Инстанс, Метод, Токен);
КонецФункции

Функция РазбитьURL(УРЛ)
	ЧастиУРЛ = СтрРазделить(УРЛ, "//", Ложь);
	Хост = ЧастиУРЛ[1];
	ЧастиУРЛ.Удалить(0); // протокол https
	ЧастиУРЛ.Удалить(0); // имя хоста
	ОтносительныйАдрес = СтрСоединить(ЧастиУРЛ, "/");
	
	Возврат Новый Структура("Хост, ОтносительныйАдрес", Хост, ОтносительныйАдрес);
	
КонецФункции

Функция ПараметрИдЧата(Телефон)
	Возврат Формат(Телефон, "ЧГ=") + "@c.us"
КонецФункции

Функция ВерсияОбработки() Экспорт
	Возврат "Демо чат-бот WhatsApp v1.6";
КонецФункции

Функция СоответствиеMimeTypes() 

	Типы = Новый Соответствие;

	Типы.Вставить(".js"     , "application/javascript");
	Типы.Вставить(".mjs"    , "application/javascript");
	Типы.Вставить(".json"   , "application/json");
	Типы.Вставить(".webmanifest", "application/manifest+json");
	Типы.Вставить(".doc"    , "application/msword");
	Типы.Вставить(".dot"    , "application/msword");
	Типы.Вставить(".wiz"    , "application/msword");
	Типы.Вставить(".bin"    , "application/octet-stream");
	Типы.Вставить(".a"      , "application/octet-stream");
	Типы.Вставить(".dll"    , "application/octet-stream");
	Типы.Вставить(".exe"    , "application/octet-stream");
	Типы.Вставить(".o"      , "application/octet-stream");
	Типы.Вставить(".obj"    , "application/octet-stream");
	Типы.Вставить(".so"     , "application/octet-stream");
	Типы.Вставить(".oda"    , "application/oda");
	Типы.Вставить(".pdf"    , "application/pdf");
	Типы.Вставить(".p7c"    , "application/pkcs7-mime");
	Типы.Вставить(".ps"     , "application/postscript");
	Типы.Вставить(".ai"     , "application/postscript");
	Типы.Вставить(".eps"    , "application/postscript");
	Типы.Вставить(".m3u"    , "application/vnd.apple.mpegurl");
	Типы.Вставить(".m3u8"   , "application/vnd.apple.mpegurl");
	Типы.Вставить(".xls"    , "application/vnd.ms-excel");
	Типы.Вставить(".xlb"    , "application/vnd.ms-excel");
	Типы.Вставить(".ppt"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pot"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".ppa"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pps"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".pwz"    , "application/vnd.ms-powerpoint");
	Типы.Вставить(".wasm"   , "application/wasm");
	Типы.Вставить(".bcpio"  , "application/x-bcpio");
	Типы.Вставить(".cpio"   , "application/x-cpio");
	Типы.Вставить(".csh"    , "application/x-csh");
	Типы.Вставить(".dvi"    , "application/x-dvi");
	Типы.Вставить(".gtar"   , "application/x-gtar");
	Типы.Вставить(".hdf"    , "application/x-hdf");
	Типы.Вставить(".h5"     , "application/x-hdf5");
	Типы.Вставить(".latex"  , "application/x-latex");
	Типы.Вставить(".mif"    , "application/x-mif");
	Типы.Вставить(".cdf"    , "application/x-netcdf");
	Типы.Вставить(".nc"     , "application/x-netcdf");
	Типы.Вставить(".p12"    , "application/x-pkcs12");
	Типы.Вставить(".pfx"    , "application/x-pkcs12");
	Типы.Вставить(".ram"    , "application/x-pn-realaudio");
	Типы.Вставить(".pyc"    , "application/x-python-code");
	Типы.Вставить(".pyo"    , "application/x-python-code");
	Типы.Вставить(".sh"     , "application/x-sh");
	Типы.Вставить(".shar"   , "application/x-shar");
	Типы.Вставить(".swf"    , "application/x-shockwave-flash");
	Типы.Вставить(".sv4cpio", "application/x-sv4cpio");
	Типы.Вставить(".sv4crc" , "application/x-sv4crc");
	Типы.Вставить(".tar"    , "application/x-tar");
	Типы.Вставить(".tcl"    , "application/x-tcl");
	Типы.Вставить(".tex"    , "application/x-tex");
	Типы.Вставить(".texi"   , "application/x-texinfo");
	Типы.Вставить(".texinfo", "application/x-texinfo");
	Типы.Вставить(".roff"   , "application/x-troff");
	Типы.Вставить(".t"      , "application/x-troff");
	Типы.Вставить(".tr"     , "application/x-troff");
	Типы.Вставить(".man"    , "application/x-troff-man");
	Типы.Вставить(".me"     , "application/x-troff-me");
	Типы.Вставить(".ms"     , "application/x-troff-ms");
	Типы.Вставить(".ustar"  , "application/x-ustar");
	Типы.Вставить(".src"    , "application/x-wais-source");
	Типы.Вставить(".xsl"    , "application/xml");
	Типы.Вставить(".rdf"    , "application/xml");
	Типы.Вставить(".wsdl"   , "application/xml");
	Типы.Вставить(".xpdl"   , "application/xml");
	Типы.Вставить(".zip"    , "application/zip");
	Типы.Вставить(".au"     , "audio/basic");
	Типы.Вставить(".snd"    , "audio/basic");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	Типы.Вставить(".mp2"    , "audio/mpeg");
	Типы.Вставить(".aif"    , "audio/x-aiff");
	Типы.Вставить(".aifc"   , "audio/x-aiff");
	Типы.Вставить(".aiff"   , "audio/x-aiff");
	Типы.Вставить(".ra"     , "audio/x-pn-realaudio");
	Типы.Вставить(".wav"    , "audio/x-wav");
	Типы.Вставить(".bmp"    , "image/bmp");
	Типы.Вставить(".gif"    , "image/gif");
	Типы.Вставить(".ief"    , "image/ief");
	Типы.Вставить(".jpg"    , "image/jpeg");
	Типы.Вставить(".png"    , "image/png");
	Типы.Вставить(".svg"    , "image/svg+xml");
	Типы.Вставить(".tiff"   , "image/tiff");
	Типы.Вставить(".tif"    , "image/tiff");
	Типы.Вставить(".ico"    , "image/vnd.microsoft.icon");
	Типы.Вставить(".ras"    , "image/x-cmu-raster");
	Типы.Вставить(".bmp"    , "image/x-ms-bmp");
	Типы.Вставить(".pnm"    , "image/x-portable-anymap");
	Типы.Вставить(".pbm"    , "image/x-portable-bitmap");
	Типы.Вставить(".pgm"    , "image/x-portable-graymap");
	Типы.Вставить(".ppm"    , "image/x-portable-pixmap");
	Типы.Вставить(".rgb"    , "image/x-rgb");
	Типы.Вставить(".xbm"    , "image/x-xbitmap");
	Типы.Вставить(".xpm"    , "image/x-xpixmap");
	Типы.Вставить(".xwd"    , "image/x-xwindowdump");
	Типы.Вставить(".eml"    , "message/rfc822");
	Типы.Вставить(".mht"    , "message/rfc822");
	Типы.Вставить(".mhtml"  , "message/rfc822");
	Типы.Вставить(".nws"    , "message/rfc822");
	Типы.Вставить(".css"    , "text/css");
	Типы.Вставить(".csv"    , "text/csv");
	Типы.Вставить(".html"   , "text/html");
	Типы.Вставить(".htm"    , "text/html");
	Типы.Вставить(".txt"    , "text/plain");
	Типы.Вставить(".bat"    , "text/plain");
	Типы.Вставить(".c"      , "text/plain");
	Типы.Вставить(".h"      , "text/plain");
	Типы.Вставить(".ksh"    , "text/plain");
	Типы.Вставить(".pl"     , "text/plain");
	Типы.Вставить(".rtx"    , "text/richtext");
	Типы.Вставить(".tsv"    , "text/tab-separated-values");
	Типы.Вставить(".py"     , "text/x-python");
	Типы.Вставить(".etx"    , "text/x-setext");
	Типы.Вставить(".sgm"    , "text/x-sgml");
	Типы.Вставить(".sgml"   , "text/x-sgml");
	Типы.Вставить(".vcf"    , "text/x-vcard");
	Типы.Вставить(".xml"    , "text/xml");
	Типы.Вставить(".mp4"    , "video/mp4");
	Типы.Вставить(".mpeg"   , "video/mpeg");
	Типы.Вставить(".m1v"    , "video/mpeg");
	Типы.Вставить(".mpa"    , "video/mpeg");
	Типы.Вставить(".mpe"    , "video/mpeg");
	Типы.Вставить(".mpg"    , "video/mpeg");
	Типы.Вставить(".mov"    , "video/quicktime");
	Типы.Вставить(".qt"     , "video/quicktime");
	Типы.Вставить(".webm"   , "video/webm");
	Типы.Вставить(".avi"    , "video/x-msvideo");
	Типы.Вставить(".movie"  , "video/x-sgi-movie");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".aac"    , "audio/aac");
	Типы.Вставить(".midi"   , "audio/midi");
	Типы.Вставить(".midi"   , "audio/x-midi");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	Типы.Вставить(".ogg"    , "audio/ogg");
	Типы.Вставить(".opus"   , "audio/opus");
	Типы.Вставить(".wav"    , "audio/wav");
	Типы.Вставить(".weba"   , "audio/webm");
	Типы.Вставить(".3gp"    , "audio/3gpp");
	Типы.Вставить(".3gpp2 " , "audio/3gpp2");
	Типы.Вставить(".mp3"    , "audio/mpeg");
	
	Возврат Типы;
	
КонецФункции

Функция ПолучитьРасширениеПоMimeType(ИскомыйТип)
	
	Типы = СоответствиеMimeTypes();
	
	Для каждого КлючЗначение Из Типы Цикл
		Если СтрНайти(НРег(ИскомыйТип), НРег(КлючЗначение.Значение)) <> 0 Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция УстановитьНастройкиСервисаПоДефолту() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("webhookUrl", ХостВебхуковПоУмолчанию());
	Структура.Вставить("incomingWebhook", "yes");
	Структура.Вставить("outgoingWebhook", "no");
	Структура.Вставить("deviceWebhook", "no");
	Структура.Вставить("stateWebhook", "no");
	Структура.Вставить("delaySendMessagesMilliseconds", 500);
	Структура.Вставить("markIncomingMessagesReaded", "yes");

	Возврат УстановитьНастройкиАккаунта(Структура);
	
КонецФункции

Процедура ВыполнитьМетодКонфигурации(ИмяМетода, Параметры = Неопределено)
	
	Если Не ЗначениеЗаполнено(ИмяМетода) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + XMLСтрока(Индекс) + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
	
КонецПроцедуры

Функция УстановитьНастройкуСервиса(Ключ, Значение) Экспорт
	
	Инстанс = IdInstance;
	Токен = ApiToken;
	
	Структура = Новый Структура;
	Структура.Вставить(Ключ, Значение);
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	ЗаписатьJSON(Запись, Структура);
	Тело = Запись.Закрыть();
	
	Ответ = ОтправитьPOSTЗапрос(ХостПоУмолчанию(), URLМетодаСервиса(Инстанс, Токен, "setSettings"), Тело);
	Возврат Ответ.saveSettings;
	
КонецФункции

#КонецОбласти
